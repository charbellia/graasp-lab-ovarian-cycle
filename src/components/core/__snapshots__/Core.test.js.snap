// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Core /> component renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Core
    dayCount={0}
    handleOvulation={[MockFunction]}
    handlePostOvulation={[MockFunction]}
    handlePreOvulation={[MockFunction]}
    handleStart={[MockFunction]}
    handleStop={[MockFunction]}
    isStarted={false}
    ovulation={false}
    ovulationActive={false}
    postOvulation={false}
    postOvulationActive={false}
    preOvulation={false}
    preOvulationActive={false}
    reloadPage={[MockFunction]}
    secreteLhFsh={false}
    secreteOestro={false}
    secreteProgest={false}
    t={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Row
        tag="div"
      >
        <Col
          sm="8"
          tag="div"
          widths={
            Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ]
          }
        >
          <Connect(Body) />
        </Col>
        <Col
          sm="4"
          tag="div"
          widths={
            Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ]
          }
        >
          <Visualizer
            dayCount={0}
            handleOvulation={[MockFunction]}
            handlePostOvulation={[MockFunction]}
            handlePreOvulation={[MockFunction]}
            handleStart={[MockFunction]}
            handleStop={[MockFunction]}
            isStarted={false}
            ovulation={false}
            ovulationActive={false}
            postOvulation={false}
            postOvulationActive={false}
            preOvulation={false}
            preOvulationActive={false}
            reloadPage={[MockFunction]}
            secreteLhFsh={false}
            secreteOestro={false}
            secreteProgest={false}
            t={[MockFunction]}
          />
        </Col>
      </Row>,
      "className": "core-container",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Col
            sm="8"
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <Connect(Body) />
          </Col>,
          <Col
            sm="4"
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <Visualizer
              dayCount={0}
              handleOvulation={[MockFunction]}
              handlePostOvulation={[MockFunction]}
              handlePreOvulation={[MockFunction]}
              handleStart={[MockFunction]}
              handleStop={[MockFunction]}
              isStarted={false}
              ovulation={false}
              ovulationActive={false}
              postOvulation={false}
              postOvulationActive={false}
              preOvulation={false}
              preOvulationActive={false}
              reloadPage={[MockFunction]}
              secreteLhFsh={false}
              secreteOestro={false}
              secreteProgest={false}
              t={[MockFunction]}
            />
          </Col>,
        ],
        "tag": "div",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Connect(Body) />,
            "sm": "8",
            "tag": "div",
            "widths": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Visualizer
              dayCount={0}
              handleOvulation={[MockFunction]}
              handlePostOvulation={[MockFunction]}
              handlePreOvulation={[MockFunction]}
              handleStart={[MockFunction]}
              handleStop={[MockFunction]}
              isStarted={false}
              ovulation={false}
              ovulationActive={false}
              postOvulation={false}
              postOvulationActive={false}
              preOvulation={false}
              preOvulationActive={false}
              reloadPage={[MockFunction]}
              secreteLhFsh={false}
              secreteOestro={false}
              secreteProgest={false}
              t={[MockFunction]}
            />,
            "sm": "4",
            "tag": "div",
            "widths": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "dayCount": 0,
              "handleOvulation": [MockFunction],
              "handlePostOvulation": [MockFunction],
              "handlePreOvulation": [MockFunction],
              "handleStart": [MockFunction],
              "handleStop": [MockFunction],
              "isStarted": false,
              "ovulation": false,
              "ovulationActive": false,
              "postOvulation": false,
              "postOvulationActive": false,
              "preOvulation": false,
              "preOvulationActive": false,
              "reloadPage": [MockFunction],
              "secreteLhFsh": false,
              "secreteOestro": false,
              "secreteProgest": false,
              "t": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Row
          tag="div"
        >
          <Col
            sm="8"
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <Connect(Body) />
          </Col>
          <Col
            sm="4"
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <Visualizer
              dayCount={0}
              handleOvulation={[MockFunction]}
              handlePostOvulation={[MockFunction]}
              handlePreOvulation={[MockFunction]}
              handleStart={[MockFunction]}
              handleStop={[MockFunction]}
              isStarted={false}
              ovulation={false}
              ovulationActive={false}
              postOvulation={false}
              postOvulationActive={false}
              preOvulation={false}
              preOvulationActive={false}
              reloadPage={[MockFunction]}
              secreteLhFsh={false}
              secreteOestro={false}
              secreteProgest={false}
              t={[MockFunction]}
            />
          </Col>
        </Row>,
        "className": "core-container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Col
              sm="8"
              tag="div"
              widths={
                Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ]
              }
            >
              <Connect(Body) />
            </Col>,
            <Col
              sm="4"
              tag="div"
              widths={
                Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ]
              }
            >
              <Visualizer
                dayCount={0}
                handleOvulation={[MockFunction]}
                handlePostOvulation={[MockFunction]}
                handlePreOvulation={[MockFunction]}
                handleStart={[MockFunction]}
                handleStop={[MockFunction]}
                isStarted={false}
                ovulation={false}
                ovulationActive={false}
                postOvulation={false}
                postOvulationActive={false}
                preOvulation={false}
                preOvulationActive={false}
                reloadPage={[MockFunction]}
                secreteLhFsh={false}
                secreteOestro={false}
                secreteProgest={false}
                t={[MockFunction]}
              />
            </Col>,
          ],
          "tag": "div",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Connect(Body) />,
              "sm": "8",
              "tag": "div",
              "widths": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Visualizer
                dayCount={0}
                handleOvulation={[MockFunction]}
                handlePostOvulation={[MockFunction]}
                handlePreOvulation={[MockFunction]}
                handleStart={[MockFunction]}
                handleStop={[MockFunction]}
                isStarted={false}
                ovulation={false}
                ovulationActive={false}
                postOvulation={false}
                postOvulationActive={false}
                preOvulation={false}
                preOvulationActive={false}
                reloadPage={[MockFunction]}
                secreteLhFsh={false}
                secreteOestro={false}
                secreteProgest={false}
                t={[MockFunction]}
              />,
              "sm": "4",
              "tag": "div",
              "widths": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "dayCount": 0,
                "handleOvulation": [MockFunction],
                "handlePostOvulation": [MockFunction],
                "handlePreOvulation": [MockFunction],
                "handleStart": [MockFunction],
                "handleStop": [MockFunction],
                "isStarted": false,
                "ovulation": false,
                "ovulationActive": false,
                "postOvulation": false,
                "postOvulationActive": false,
                "preOvulation": false,
                "preOvulationActive": false,
                "reloadPage": [MockFunction],
                "secreteLhFsh": false,
                "secreteOestro": false,
                "secreteProgest": false,
                "t": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Core /> renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Core
    dayCount={0}
    handleOvulation={[MockFunction]}
    handlePostOvulation={[MockFunction]}
    handlePreOvulation={[MockFunction]}
    handleStart={[MockFunction]}
    handleStop={[MockFunction]}
    isStarted={false}
    ovulation={false}
    ovulationActive={false}
    postOvulation={false}
    postOvulationActive={false}
    preOvulation={false}
    preOvulationActive={false}
    reloadPage={[MockFunction]}
    secreteLhFsh={false}
    secreteOestro={false}
    secreteProgest={false}
    t={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Row
        tag="div"
      >
        <Col
          sm="8"
          tag="div"
          widths={
            Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ]
          }
        >
          <Connect(Body) />
        </Col>
        <Col
          sm="4"
          tag="div"
          widths={
            Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ]
          }
        >
          <Visualizer
            dayCount={0}
            handleOvulation={[MockFunction]}
            handlePostOvulation={[MockFunction]}
            handlePreOvulation={[MockFunction]}
            handleStart={[MockFunction]}
            handleStop={[MockFunction]}
            isStarted={false}
            ovulation={false}
            ovulationActive={false}
            postOvulation={false}
            postOvulationActive={false}
            preOvulation={false}
            preOvulationActive={false}
            reloadPage={[MockFunction]}
            secreteLhFsh={false}
            secreteOestro={false}
            secreteProgest={false}
            t={[MockFunction]}
          />
        </Col>
      </Row>,
      "className": "core-container",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Col
            sm="8"
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <Connect(Body) />
          </Col>,
          <Col
            sm="4"
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <Visualizer
              dayCount={0}
              handleOvulation={[MockFunction]}
              handlePostOvulation={[MockFunction]}
              handlePreOvulation={[MockFunction]}
              handleStart={[MockFunction]}
              handleStop={[MockFunction]}
              isStarted={false}
              ovulation={false}
              ovulationActive={false}
              postOvulation={false}
              postOvulationActive={false}
              preOvulation={false}
              preOvulationActive={false}
              reloadPage={[MockFunction]}
              secreteLhFsh={false}
              secreteOestro={false}
              secreteProgest={false}
              t={[MockFunction]}
            />
          </Col>,
        ],
        "tag": "div",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Connect(Body) />,
            "sm": "8",
            "tag": "div",
            "widths": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Visualizer
              dayCount={0}
              handleOvulation={[MockFunction]}
              handlePostOvulation={[MockFunction]}
              handlePreOvulation={[MockFunction]}
              handleStart={[MockFunction]}
              handleStop={[MockFunction]}
              isStarted={false}
              ovulation={false}
              ovulationActive={false}
              postOvulation={false}
              postOvulationActive={false}
              preOvulation={false}
              preOvulationActive={false}
              reloadPage={[MockFunction]}
              secreteLhFsh={false}
              secreteOestro={false}
              secreteProgest={false}
              t={[MockFunction]}
            />,
            "sm": "4",
            "tag": "div",
            "widths": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "dayCount": 0,
              "handleOvulation": [MockFunction],
              "handlePostOvulation": [MockFunction],
              "handlePreOvulation": [MockFunction],
              "handleStart": [MockFunction],
              "handleStop": [MockFunction],
              "isStarted": false,
              "ovulation": false,
              "ovulationActive": false,
              "postOvulation": false,
              "postOvulationActive": false,
              "preOvulation": false,
              "preOvulationActive": false,
              "reloadPage": [MockFunction],
              "secreteLhFsh": false,
              "secreteOestro": false,
              "secreteProgest": false,
              "t": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Row
          tag="div"
        >
          <Col
            sm="8"
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <Connect(Body) />
          </Col>
          <Col
            sm="4"
            tag="div"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <Visualizer
              dayCount={0}
              handleOvulation={[MockFunction]}
              handlePostOvulation={[MockFunction]}
              handlePreOvulation={[MockFunction]}
              handleStart={[MockFunction]}
              handleStop={[MockFunction]}
              isStarted={false}
              ovulation={false}
              ovulationActive={false}
              postOvulation={false}
              postOvulationActive={false}
              preOvulation={false}
              preOvulationActive={false}
              reloadPage={[MockFunction]}
              secreteLhFsh={false}
              secreteOestro={false}
              secreteProgest={false}
              t={[MockFunction]}
            />
          </Col>
        </Row>,
        "className": "core-container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Col
              sm="8"
              tag="div"
              widths={
                Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ]
              }
            >
              <Connect(Body) />
            </Col>,
            <Col
              sm="4"
              tag="div"
              widths={
                Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ]
              }
            >
              <Visualizer
                dayCount={0}
                handleOvulation={[MockFunction]}
                handlePostOvulation={[MockFunction]}
                handlePreOvulation={[MockFunction]}
                handleStart={[MockFunction]}
                handleStop={[MockFunction]}
                isStarted={false}
                ovulation={false}
                ovulationActive={false}
                postOvulation={false}
                postOvulationActive={false}
                preOvulation={false}
                preOvulationActive={false}
                reloadPage={[MockFunction]}
                secreteLhFsh={false}
                secreteOestro={false}
                secreteProgest={false}
                t={[MockFunction]}
              />
            </Col>,
          ],
          "tag": "div",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Connect(Body) />,
              "sm": "8",
              "tag": "div",
              "widths": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Visualizer
                dayCount={0}
                handleOvulation={[MockFunction]}
                handlePostOvulation={[MockFunction]}
                handlePreOvulation={[MockFunction]}
                handleStart={[MockFunction]}
                handleStop={[MockFunction]}
                isStarted={false}
                ovulation={false}
                ovulationActive={false}
                postOvulation={false}
                postOvulationActive={false}
                preOvulation={false}
                preOvulationActive={false}
                reloadPage={[MockFunction]}
                secreteLhFsh={false}
                secreteOestro={false}
                secreteProgest={false}
                t={[MockFunction]}
              />,
              "sm": "4",
              "tag": "div",
              "widths": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "dayCount": 0,
                "handleOvulation": [MockFunction],
                "handlePostOvulation": [MockFunction],
                "handlePreOvulation": [MockFunction],
                "handleStart": [MockFunction],
                "handleStop": [MockFunction],
                "isStarted": false,
                "ovulation": false,
                "ovulationActive": false,
                "postOvulation": false,
                "postOvulationActive": false,
                "preOvulation": false,
                "preOvulationActive": false,
                "reloadPage": [MockFunction],
                "secreteLhFsh": false,
                "secreteOestro": false,
                "secreteProgest": false,
                "t": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
